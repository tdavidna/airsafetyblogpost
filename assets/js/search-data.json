{
  
    
        "post0": {
            "title": "Air Safety Blog",
            "content": "# Exercise: 4.3 # Date: 10-24-2021 . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import squarify pd.options.mode.chained_assignment = None . home_dir = &#39;C:/David/Study_MS/DSC640&#39; airline_df = pd.read_csv(home_dir + &#39;/airline-safety.csv&#39;) road_crash_df = pd.read_excel(home_dir + &#39;/Car_Crashes.xlsx&#39;) . airline_df1 = airline_df[[&#39;incidents_85_99&#39;,&#39;incidents_00_14&#39;]] airline_df2 = airline_df[[&#39;fatalities_00_14&#39;]] . airline_df.head() . airline avail_seat_km_per_week incidents_85_99 fatal_accidents_85_99 fatalities_85_99 incidents_00_14 fatal_accidents_00_14 fatalities_00_14 . 0 Aer Lingus | 320906734 | 2 | 0 | 0 | 0 | 0 | 0 | . 1 Aeroflot* | 1197672318 | 76 | 14 | 128 | 6 | 1 | 88 | . 2 Aerolineas Argentinas | 385803648 | 6 | 0 | 0 | 1 | 0 | 0 | . 3 Aeromexico* | 596871813 | 3 | 1 | 64 | 5 | 0 | 0 | . 4 Air Canada | 1865253802 | 2 | 0 | 0 | 2 | 0 | 0 | . Metrics 1 . fig, ax = plt.subplots(2, figsize=(10, 6)) ax[0].scatter(x = airline_df[&#39;incidents_85_99&#39;], y = airline_df[&#39;fatal_accidents_85_99&#39;]) ax[0].set_title(&#39;1985 - 1999&#39;) ax[0].set_ylabel(&quot;Fatal Accidents&quot;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) ax[1].scatter(x = airline_df[&#39;incidents_00_14&#39;], y = airline_df[&#39;fatal_accidents_00_14&#39;]) ax[1].set_title(&#39;2000 - 2014&#39;) ax[1].set_xlabel(&quot;Incidents&quot;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) ax[1].set_ylabel(&quot;Fatal Accidents&quot;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.show() . Metrics 2 . incidents_df = pd.read_excel(home_dir + &#39;/PersonsKilled_1994_2019_USA.xlsx&#39;) . incidents_df = incidents_df[(incidents_df[&#39;Year&#39;] &gt; 1999) &amp; (incidents_df[&#39;Year&#39;] &lt; 2015)] . metrics2_df = pd.DataFrame(columns=(&#39;Vehicle&#39;,&#39;Incident_count&#39;)) . incidents_df . Year Passenger Cars Light Trucks Large Trucks Motorcycles Buses Other/ Unknown Total Pedestrian Pedalcyclist Other Total.1 Unknown Person Type Total.2 . 6 2000 | 20699 | 11526 | 754 | 2897 | 22 | 450 | 33451 | 4763 | 693 | 141 | 5597 | 0 | 41945 | . 7 2001 | 20320 | 11723 | 708 | 3197 | 34 | 458 | 33243 | 4901 | 732 | 123 | 5756 | 0 | 42196 | . 8 2002 | 20569 | 12274 | 689 | 3270 | 45 | 528 | 34105 | 4851 | 665 | 114 | 5630 | 0 | 43005 | . 9 2003 | 19725 | 12546 | 726 | 3714 | 41 | 589 | 33627 | 4774 | 629 | 140 | 5543 | 0 | 42884 | . 10 2004 | 19192 | 12674 | 766 | 4028 | 42 | 602 | 33276 | 4675 | 727 | 130 | 5532 | 0 | 42836 | . 11 2005 | 18512 | 13037 | 804 | 4576 | 58 | 659 | 33070 | 4892 | 786 | 186 | 5864 | 0 | 43510 | . 12 2006 | 17925 | 12761 | 805 | 4837 | 27 | 601 | 32119 | 4795 | 772 | 185 | 5752 | 0 | 42708 | . 13 2007 | 16614 | 12458 | 805 | 5174 | 36 | 614 | 30527 | 4699 | 701 | 158 | 5558 | 0 | 41259 | . 14 2008 | 14646 | 10816 | 682 | 5312 | 67 | 580 | 26791 | 4414 | 718 | 188 | 5320 | 0 | 37423 | . 15 2009 | 13135 | 10312 | 499 | 4469 | 26 | 554 | 24526 | 4109 | 628 | 151 | 4888 | 0 | 33883 | . 16 2010 | 12491 | 9782 | 530 | 4518 | 44 | 524 | 23371 | 4302 | 623 | 185 | 5110 | 0 | 32999 | . 17 2011 | 12014 | 9302 | 640 | 4630 | 55 | 499 | 22510 | 4457 | 682 | 200 | 5339 | 0 | 32479 | . 18 2012 | 12361 | 9418 | 697 | 4986 | 39 | 502 | 23017 | 4818 | 734 | 227 | 5779 | 0 | 33782 | . 19 2013 | 12037 | 9186 | 695 | 4692 | 54 | 511 | 22483 | 4779 | 749 | 190 | 5718 | 0 | 32893 | . 20 2014 | 11947 | 9103 | 656 | 4594 | 44 | 557 | 22307 | 4910 | 729 | 204 | 5843 | 0 | 32744 | . value_dict = {&#39;Vehicle&#39;:&#39;Cars&#39;,&#39;Incident_count&#39;:incidents_df[&#39;Passenger Cars&#39;].sum()} light_truck = {&#39;Vehicle&#39;:&#39;Light Trucks&#39;,&#39;Incident_count&#39;:incidents_df[&#39;Light Trucks&#39;].sum()} Large_Trucks = {&#39;Vehicle&#39;:&#39;Large Trucks&#39;,&#39;Incident_count&#39;:incidents_df[&#39;Large Trucks&#39;].sum()} Motorcycle = {&#39;Vehicle&#39;:&#39;Motorcycles&#39;,&#39;Incident_count&#39;:incidents_df[&#39;Motorcycles&#39;].sum()} Buses = {&#39;Vehicle&#39;:&#39;Buses&#39;,&#39;Incident_count&#39;:incidents_df[&#39;Buses&#39;].sum()} Air = {&#39;Vehicle&#39;:&#39;Air&#39;,&#39;Incident_count&#39;:airline_df[&#39;incidents_00_14&#39;].sum()} metrics2_df = metrics2_df.append(value_dict,ignore_index=True) metrics2_df = metrics2_df.append(light_truck,ignore_index=True) metrics2_df = metrics2_df.append(Large_Trucks,ignore_index=True) metrics2_df = metrics2_df.append(Motorcycle,ignore_index=True) metrics2_df = metrics2_df.append(Buses,ignore_index=True) metrics2_df = metrics2_df.append(Air,ignore_index=True) . metrics2_df . Vehicle Incident_count . 0 Cars | 242187 | . 1 Light Trucks | 166918 | . 2 Large Trucks | 10456 | . 3 Motorcycles | 64894 | . 4 Buses | 634 | . 5 Air | 231 | . plt.figure(figsize=(8,6)) sns.barplot(x=&#39;Vehicle&#39;, y=&#39;Incident_count&#39;, data=metrics2_df) #plt.xticks(rotation=60) plt.ylabel(&#39;Incident Count&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.xlabel(&#39;Vehicle&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.title(&#39;Incident Count by Vehicle(2000 - 2014)&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.show() . Metrics 3 . fig = plt.figure(figsize=(10,7)) #ax = fig.add_axes([&#39;2000-2014&#39;,&#39;1985-1999&#39;]) plt.boxplot(airline_df[[&#39;fatalities_00_14&#39;,&#39;fatalities_85_99&#39;]]) plt.xticks([1, 2], [&#39;2000-2014&#39;, &#39;1985-1999&#39;]) plt.ylabel(&#39;fatality Count&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) #plt.xlabel(&#39;Vehicle&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.title(&#39;Fatality Comparison&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.show() . Metrics 4 . treemap_df = airline_df[[&#39;airline&#39;,&#39;incidents_85_99&#39;]] treemap_df = treemap_df.sort_values(by=[&#39;incidents_85_99&#39;]) treemap_df = treemap_df.tail(5) treemap_df[&#39;incidents_85_99&#39;] = (100 * treemap_df[&#39;incidents_85_99&#39;]/treemap_df[&#39;incidents_85_99&#39;].sum())#.round(0) treemap_df.head() . airline incidents_85_99 . 51 United / Continental* | 11.515152 | . 11 American* | 12.727273 | . 19 Delta / Northwest* | 14.545455 | . 22 Ethiopian Airlines | 15.151515 | . 1 Aeroflot* | 46.060606 | . squarify.plot(sizes=treemap_df[&#39;incidents_85_99&#39;], label=treemap_df[&#39;airline&#39;], alpha=0.6) plt.title(&#39;Top 5 Incidents 1985 - 99&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 12) plt.show() . treemap_df2 = airline_df[[&#39;airline&#39;,&#39;incidents_00_14&#39;]] treemap_df2 = treemap_df2.sort_values(by=[&#39;incidents_00_14&#39;]) treemap_df2 = treemap_df2.tail(5) treemap_df2[&#39;incidents_00_14&#39;] = (100 * treemap_df2[&#39;incidents_00_14&#39;]/treemap_df2[&#39;incidents_00_14&#39;].sum()) treemap_df2.head() . airline incidents_00_14 . 40 Saudi Arabian | 14.285714 | . 52 US Airways / America West* | 14.285714 | . 51 United / Continental* | 18.181818 | . 11 American* | 22.077922 | . 19 Delta / Northwest* | 31.168831 | . squarify.plot(sizes=treemap_df2[&#39;incidents_00_14&#39;], label=treemap_df2[&#39;airline&#39;], alpha=0.6) plt.title(&#39;Top 5 Incidents 2000 - 14&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 12) plt.show() . Metrics 5 . metrics5_df = airline_df[[&#39;airline&#39;,&#39;avail_seat_km_per_week&#39;]] metrics5_df[&#39;Incidents&#39;] = airline_df[&#39;incidents_00_14&#39;] + airline_df[&#39;incidents_85_99&#39;] metrics5_df = metrics5_df.sort_values(by=[&#39;avail_seat_km_per_week&#39;]) metrics5_df = metrics5_df.tail(10) metrics5_df[&#39;avail_seat_km_per_week&#39;] = metrics5_df[&#39;avail_seat_km_per_week&#39;]/1000000000 . df1 = metrics5_df[[&#39;airline&#39;,&#39;avail_seat_km_per_week&#39;]] df1.columns = (&#39;Airline&#39;,&#39;Count&#39;) df1[&#39;Description&#39;] = &#39;Available_Miles&#39; df1 df2 = metrics5_df[[&#39;airline&#39;,&#39;Incidents&#39;]] df2.columns = (&#39;Airline&#39;,&#39;Count&#39;) df2[&#39;Description&#39;] = &#39;Incidents&#39; frames=[df1,df2] metrics5_final_df = pd.concat(frames) . plt.figure(figsize=(8,6)) sns.barplot(x=&#39;Airline&#39;, y=&#39;Count&#39;, hue=&quot;Description&quot;, data=metrics5_final_df, ci=None); plt.xticks(rotation=60) plt.ylabel(&#39;Count(Miles in billion)&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.xlabel(&#39;Airline&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.title(&#39;Compare Incidents based on Miles&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 10) plt.show() . Metrics 6 . metrics6_df = airline_df[[&#39;airline&#39;]] metrics6_df[&#39;Incidents&#39;] = airline_df[&#39;incidents_00_14&#39;] + airline_df[&#39;incidents_85_99&#39;] metrics6_df[&#39;Fatal_Accidents&#39;] = airline_df[&#39;fatal_accidents_00_14&#39;] + airline_df[&#39;fatal_accidents_85_99&#39;] metrics6_df[&#39;Fatalities&#39;] = airline_df[&#39;fatalities_00_14&#39;] + airline_df[&#39;fatalities_85_99&#39;] metrics6_df = metrics6_df.sort_values(by=[&#39;Incidents&#39;]) metrics6_df = metrics6_df.tail(5) . metrics6_df[&#39;Incidents&#39;] = 100 * (metrics6_df[&#39;Incidents&#39;] / (metrics6_df[&#39;Incidents&#39;] + metrics6_df[&#39;Fatal_Accidents&#39;] + metrics6_df[&#39;Fatalities&#39;])) metrics6_df[&#39;Fatal_Accidents&#39;] = 100 * (metrics6_df[&#39;Fatal_Accidents&#39;] / (metrics6_df[&#39;Incidents&#39;] + metrics6_df[&#39;Fatal_Accidents&#39;] + metrics6_df[&#39;Fatalities&#39;])) metrics6_df[&#39;Fatalities&#39;] = 100 * (metrics6_df[&#39;Fatalities&#39;] / (metrics6_df[&#39;Incidents&#39;] + metrics6_df[&#39;Fatal_Accidents&#39;] + metrics6_df[&#39;Fatalities&#39;])) . metrics6_df[[&#39;Incidents&#39;,&#39;Fatal_Accidents&#39;,&#39;Fatalities&#39;]] = metrics6_df[[&#39;Incidents&#39;,&#39;Fatal_Accidents&#39;,&#39;Fatalities&#39;]].apply(lambda x: x/x.sum() * 100, axis=1) metrics6_df . airline Incidents Fatal_Accidents Fatalities . 22 Ethiopian Airlines | 10.135135 | 2.364865 | 87.500000 | . 51 United / Continental* | 7.006369 | 2.123142 | 90.870488 | . 11 American* | 6.749556 | 1.420959 | 91.829485 | . 19 Delta / Northwest* | 9.230769 | 2.692308 | 88.076923 | . 1 Aeroflot* | 26.198083 | 4.792332 | 69.009585 | . plt.figure(figsize=(8,6)) plt.stackplot(metrics6_df[&#39;airline&#39;], [metrics6_df[&#39;Incidents&#39;], metrics6_df[&#39;Fatal_Accidents&#39;], metrics6_df[&#39;Fatalities&#39;]], labels=[&#39;Incidents&#39;,&#39;Fatal_Accidents&#39;,&#39;Fatalities&#39;],alpha=0.8) plt.title(&#39;Incident and Accident Comparison&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 12) plt.xlabel(&#39;Airline&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 12) plt.ylabel(&#39;Incidents by Airways&#39;, color=&#39;black&#39;, fontweight = &#39;bold&#39;, fontsize = 12) plt.xticks(rotation=60) plt.legend(loc=2, fontsize=&#39;large&#39;) plt.show() .",
            "url": "https://tdavidna.github.io/airsafetyblogpost/fastpages/jupyter/2021/10/21/DSC64043.html",
            "relUrl": "/fastpages/jupyter/2021/10/21/DSC64043.html",
            "date": " • Oct 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tdavidna.github.io/airsafetyblogpost/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tdavidna.github.io/airsafetyblogpost/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tdavidna.github.io/airsafetyblogpost/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tdavidna.github.io/airsafetyblogpost/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}